name: Docker Builder Pro

# 增加权限配置，允许自动运行
permissions:
  contents: write
  packages: write
  actions: write
  # 添加安全事件写入权限，用于上传扫描结果
  security-events: write

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'src/**'
  workflow_dispatch:
    inputs:
      repository:
        description: '代码仓库地址 (例如: https://github.com/username/repo)'
        required: true
        type: string
      branch:
        description: '代码仓库分支'
        required: true
        default: 'main'
        type: string
      dockerfile:
        description: '相对于代码仓库根目录的Dockerfile路径'
        required: true
        default: 'Dockerfile'
        type: string
      image_name:
        description: 'Docker镜像完整名称 (例如: docker.io/username/image:tag)'
        required: true
        type: string
      platforms:
        description: '构建平台列表 (逗号分隔，例如: linux/amd64,linux/arm64)'
        required: true
        default: 'linux/amd64'
        type: string
      registry:
        description: 'Docker镜像仓库 (例如: docker.io, ghcr.io)'
        required: true
        default: 'docker.io'
        type: string
      docker_username:
        description: 'Docker仓库用户名'
        required: true
        type: string
      docker_password:
        description: 'Docker仓库密码/令牌'
        required: true
        type: string
      repo_token:
        description: '仓库访问令牌 (可选，私有仓库需要)'
        required: false
        type: string
      callback_url:
        description: '构建状态回调URL (可选)'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出工作流仓库
        uses: actions/checkout@v3
        with:
          token: ${{ github.token }}

      - name: 输出构建信息
        id: build_info
        run: |
          echo "构建信息:"
          echo "- 代码仓库: ${{ github.event.inputs.repository }}"
          echo "- 分支: ${{ github.event.inputs.branch }}"
          echo "- Dockerfile路径: ${{ github.event.inputs.dockerfile }}"
          echo "- 镜像名称: ${{ github.event.inputs.image_name }}"
          echo "- 构建平台: ${{ github.event.inputs.platforms }}"
          
          # 解析镜像信息
          IMAGE_FULL=${{ github.event.inputs.image_name }}
          IMAGE_REGISTRY=${{ github.event.inputs.registry }}
          IMAGE_NAME=$(echo $IMAGE_FULL | cut -d':' -f1)
          IMAGE_TAG=$(echo $IMAGE_FULL | cut -d':' -f2)
          if [ "$IMAGE_TAG" == "$IMAGE_NAME" ]; then
            IMAGE_TAG="latest"
          fi
          
          echo "- 镜像仓库: $IMAGE_REGISTRY"
          echo "- 镜像名称: $IMAGE_NAME"
          echo "- 镜像标签: $IMAGE_TAG"
          
          # 设置输出变量
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # 处理平台信息
          PLATFORMS="${{ github.event.inputs.platforms }}"
          PLATFORMS_COUNT=$(echo $PLATFORMS | tr ',' '\n' | wc -l)
          echo "- 平台数量: $PLATFORMS_COUNT"
          echo "platforms_count=$PLATFORMS_COUNT" >> $GITHUB_OUTPUT
          
          # 为多平台构建准备JSON数组
          if [ $PLATFORMS_COUNT -gt 1 ]; then
            PLATFORMS_JSON=$(echo $PLATFORMS | tr ',' '\n' | jq -R . | jq -s .)
            echo "platforms_array=$PLATFORMS_JSON" >> $GITHUB_OUTPUT
          fi

      - name: 通知构建开始
        if: ${{ github.event.inputs.callback_url != '' }}
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            "${{ github.event.inputs.callback_url }}" \
            -d '{
              "status": "started",
              "step": "初始化",
              "message": "开始构建",
              "run_id": "${{ github.run_id }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' || echo "回调失败，但继续构建流程"

      - name: 克隆源码仓库
        run: |
          mkdir -p source_code
          if [ -n "${{ github.event.inputs.repo_token }}" ]; then
            echo "使用令牌克隆仓库..."
            REPO_URL=$(echo "${{ github.event.inputs.repository }}" | sed "s/https:\/\//https:\/\/${{ github.event.inputs.repo_token }}@/g")
            git clone --depth 1 --branch ${{ github.event.inputs.branch }} $REPO_URL ./source_code
          else
            echo "公开克隆仓库..."
            git clone --depth 1 --branch ${{ github.event.inputs.branch }} ${{ github.event.inputs.repository }} ./source_code
          fi
          
          # 检查Dockerfile是否存在
          if [ ! -f "./source_code/${{ github.event.inputs.dockerfile }}" ]; then
            echo "错误: 在仓库中找不到指定的Dockerfile: ${{ github.event.inputs.dockerfile }}"
            exit 1
          fi

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: 登录到Docker仓库
        uses: docker/login-action@v2
        with:
          registry: ${{ github.event.inputs.registry }}
          username: ${{ github.event.inputs.docker_username }}
          password: ${{ github.event.inputs.docker_password }}

      - name: 构建并推送多平台Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: ./source_code
          file: ./source_code/${{ github.event.inputs.dockerfile }}
          push: true
          tags: ${{ github.event.inputs.image_name }}
          platforms: ${{ github.event.inputs.platforms }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
          labels: |
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            org.opencontainers.image.source=${{ github.event.inputs.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: 镜像安全扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.event.inputs.image_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: '5m'

      - name: 上传扫描结果
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: 构建结果通知
        if: ${{ github.event.inputs.callback_url != '' }}
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            "${{ github.event.inputs.callback_url }}" \
            -d '{
              "status": "completed",
              "step": "构建完成",
              "message": "Docker镜像构建并推送成功",
              "run_id": "${{ github.run_id }}",
              "image": "${{ github.event.inputs.image_name }}",
              "platforms": "${{ github.event.inputs.platforms }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' || echo "结果回调失败"

      - name: 构建完成通知
        run: |
          echo "Docker镜像构建完成!"
          echo "镜像: ${{ github.event.inputs.image_name }}"
          echo "平台: ${{ github.event.inputs.platforms }}"