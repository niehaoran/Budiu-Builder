name: Docker Builder Pro

# 增加权限配置，允许自动运行
permissions:
  contents: write
  packages: write
  actions: write
  # 添加安全事件写入权限，用于上传扫描结果
  security-events: write

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'src/**'
  workflow_dispatch:
    inputs:
      workflow_name:
        description: '工作流名称 (用于辨识构建任务)'
        required: false
        type: string
        default: 'Docker构建任务'
      repository:
        description: '代码仓库地址 (例如: https://github.com/username/repo)'
        required: true
        type: string
      branch:
        description: '代码仓库分支'
        required: true
        default: 'main'
        type: string
      dockerfile:
        description: '相对于代码仓库根目录的Dockerfile路径'
        required: true
        default: 'Dockerfile'
        type: string
      image_info:
        description: '镜像信息 (格式: registry/username/image:tag，例如: docker.io/username/image:tag)'
        required: true
        type: string
      platforms:
        description: '构建平台列表 (逗号分隔，例如: linux/amd64,linux/arm64)'
        required: true
        default: 'linux/amd64'
        type: string
      docker_username:
        description: 'Docker仓库用户名'
        required: true
        type: string
      encrypted_data:
        description: '加密的敏感信息 (使用仓库公钥加密的base64字符串)'
        required: true
        type: string
      repo_token:
        description: '仓库访问令牌 (可选，私有仓库需要)'
        required: false
        type: string
      files_json:
        description: '虚拟文件JSON (可选，用于创建自定义文件)'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 设置敏感信息掩码
        run: |
          # 如果有repo_token输入，确保它被掩码处理
          if [ -n "${{ github.event.inputs.repo_token }}" ]; then
            echo "::add-mask::${{ github.event.inputs.repo_token }}"
          fi
          
          # 确保加密数据被掩码处理
          if [ -n "${{ github.event.inputs.encrypted_data }}" ]; then
            echo "::add-mask::${{ github.event.inputs.encrypted_data }}"
          fi
          
          echo "已设置敏感信息掩码"

      - name: 检出工作流仓库
        uses: actions/checkout@v3
        with:
          token: ${{ github.token }}

      - name: 解密敏感信息
        id: decrypt
        env:
          ENCRYPTED_DATA: ${{ github.event.inputs.encrypted_data }}
          PRIVATE_KEY: ${{ secrets.DECRYPT_PRIVATE_KEY }}
        run: |
          if [ -z "$ENCRYPTED_DATA" ]; then
            echo "错误: 未提供加密数据"
            exit 1
          fi
          
          if [ -z "$PRIVATE_KEY" ]; then
            echo "错误: 未提供解密私钥，请在仓库设置中添加DECRYPT_PRIVATE_KEY密钥"
            exit 1
          fi
          
          echo "开始解密敏感信息..."
          
          # 检查加密数据长度但不显示具体长度
          echo "正在验证加密数据..."
          
          # 将私钥保存到临时文件，不输出任何内容
          echo "$PRIVATE_KEY" > private_key.pem 2>/dev/null
          chmod 600 private_key.pem
          
          # 检查私钥是否有效
          if ! openssl rsa -check -noout -in private_key.pem > /dev/null 2>&1; then
            echo "错误: 提供的私钥无效"
            exit 1
          fi
          
          echo "正在解密数据..."
          
          # 解码base64并解密数据，不显示任何内容
          if ! echo "$ENCRYPTED_DATA" | base64 -d > encrypted_data.bin 2>/dev/null; then
            echo "错误: 无法解码base64数据"
            echo "请确保前端传递的是有效的base64编码字符串"
            exit 1
          fi
          
          # 使用更详细的错误输出但不显示敏感信息
          if ! openssl pkeyutl -decrypt -inkey private_key.pem -in encrypted_data.bin -out decrypted_data.txt -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 2>/dev/null; then
            echo "错误: 无法解密数据，可能原因:"
            echo "1. 私钥和加密时使用的公钥不匹配"
            echo "2. 加密数据已被破坏或修改"
            echo "3. 加密和解密使用了不同的填充方式或哈希算法"
            exit 1
          fi
          
          echo "解密成功"
          
          # 检查解密后的文件是否为有效JSON
          if ! jq empty decrypted_data.txt 2>/dev/null; then
            echo "错误: 解密后的数据不是有效的JSON"
            exit 1
          fi
          
          echo "解密数据验证成功"
          
          # 读取解密后的数据
          DOCKER_PASSWORD=$(jq -r '.docker_password' decrypted_data.txt)
          
          # 检查是否成功获取Docker密码
          if [ "$DOCKER_PASSWORD" = "null" ] || [ -z "$DOCKER_PASSWORD" ]; then
            echo "错误: 未从解密数据中找到docker_password"
            exit 1
          else
            echo "成功获取Docker密码"
            # 不显示密码，也不显示长度
            echo "::add-mask::$DOCKER_PASSWORD"
            echo "docker_password=$DOCKER_PASSWORD" >> $GITHUB_OUTPUT
          fi
          
          # 获取额外的敏感数据（如果有）
          OTHER_TOKEN=$(jq -r '.repo_token // ""' decrypted_data.txt)
          if [ -n "$OTHER_TOKEN" ] && [ "$OTHER_TOKEN" != "null" ]; then
            echo "找到额外的repo_token"
            echo "::add-mask::$OTHER_TOKEN"
            echo "repo_token=$OTHER_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "未在加密数据中找到额外的repo_token，将使用明文提供的token（如果有）"
          fi
          
          # 删除临时文件
          rm -f private_key.pem encrypted_data.bin decrypted_data.txt
          
          echo "敏感信息解密处理完成"

      - name: 输出构建信息
        id: build_info
        run: |
          echo "构建信息:"
          echo "- 工作流名称: ${{ github.event.inputs.workflow_name || 'Docker构建任务' }}"
          # 不显示完整仓库地址，避免泄露私有仓库信息
          REPO_URL="${{ github.event.inputs.repository }}"
          REPO_DISPLAY=$(echo "$REPO_URL" | sed -E 's/https:\/\/([^\/]+)\/(.+)/https:\/\/\1\/***\/***/')
          echo "- 代码仓库: $REPO_DISPLAY"
          echo "- 分支: ${{ github.event.inputs.branch }}"
          echo "- Dockerfile路径: ${{ github.event.inputs.dockerfile }}"
          echo "- 镜像信息: ${{ github.event.inputs.image_info }}"
          echo "- 构建平台: ${{ github.event.inputs.platforms }}"
          
          # 解析镜像信息
          IMAGE_FULL="${{ github.event.inputs.image_info }}"
          
          # 提取镜像仓库、名称和标签
          if [[ "$IMAGE_FULL" == *":"* ]]; then
            IMAGE_WITHOUT_TAG=$(echo $IMAGE_FULL | cut -d':' -f1)
            IMAGE_TAG=$(echo $IMAGE_FULL | cut -d':' -f2)
          else
            IMAGE_WITHOUT_TAG=$IMAGE_FULL
            IMAGE_TAG="latest"
          fi
          
          # 提取仓库地址
          if [[ "$IMAGE_WITHOUT_TAG" == *"/"* ]]; then
            IMAGE_REGISTRY=$(echo $IMAGE_WITHOUT_TAG | cut -d'/' -f1)
            IMAGE_NAME_WITH_USER=$(echo $IMAGE_WITHOUT_TAG | cut -d'/' -f2-)
          else
            IMAGE_REGISTRY="docker.io"
            IMAGE_NAME_WITH_USER=$IMAGE_WITHOUT_TAG
          fi
          
          echo "- 镜像仓库: $IMAGE_REGISTRY"
          echo "- 镜像名称: $IMAGE_NAME_WITH_USER"
          echo "- 镜像标签: $IMAGE_TAG"
          
          # 检查镜像名是否有重复用户名问题
          USERNAME="${{ github.event.inputs.docker_username }}"
          EXPECTED_PREFIX="${USERNAME}/"
          
          if [[ "$IMAGE_NAME_WITH_USER" == "${USERNAME}/${USERNAME}"* ]]; then
            echo "警告: 检测到镜像名称中有重复的用户名"
            # 修正镜像名称
            CORRECTED_NAME="${USERNAME}/$(echo $IMAGE_NAME_WITH_USER | sed "s|${USERNAME}/${USERNAME}|${USERNAME}|")"
            echo "镜像名称已修正: $CORRECTED_NAME"
            IMAGE_NAME_WITH_USER=$CORRECTED_NAME
          fi
          
          # 重新构造完整镜像名称
          FINAL_IMAGE="${IMAGE_REGISTRY}/${IMAGE_NAME_WITH_USER}:${IMAGE_TAG}"
          
          echo "- 最终镜像名称: $FINAL_IMAGE"
          
          # 设置输出变量
          echo "image_registry=$IMAGE_REGISTRY" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME_WITH_USER" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "final_image=$FINAL_IMAGE" >> $GITHUB_ENV
          
          # 处理平台信息
          PLATFORMS="${{ github.event.inputs.platforms }}"
          PLATFORMS_COUNT=$(echo $PLATFORMS | tr ',' '\n' | wc -l)
          echo "- 平台数量: $PLATFORMS_COUNT"
          echo "platforms_count=$PLATFORMS_COUNT" >> $GITHUB_OUTPUT
          
          # 为多平台构建准备JSON数组
          if [ $PLATFORMS_COUNT -gt 1 ]; then
            PLATFORMS_JSON=$(echo $PLATFORMS | tr ',' '\n' | jq -R . | jq -s .)
            echo "platforms_array=$PLATFORMS_JSON" >> $GITHUB_OUTPUT
          fi

      - name: 克隆源码仓库
        run: |
          mkdir -p source_code
          # 使用解密的repo_token（如果有），否则使用输入参数中提供的token
          REPO_TOKEN="${{ steps.decrypt.outputs.repo_token || github.event.inputs.repo_token }}"
          
          if [ -n "$REPO_TOKEN" ]; then
            echo "使用令牌克隆仓库..."
            # 确保令牌不会在日志中显示
            echo "::add-mask::$REPO_TOKEN"
            git config --global url."https://${REPO_TOKEN}@github.com/".insteadOf "https://github.com/"
            git clone --depth 1 --branch ${{ github.event.inputs.branch }} ${{ github.event.inputs.repository }} ./source_code
          else
            echo "公开克隆仓库..."
            git clone --depth 1 --branch ${{ github.event.inputs.branch }} ${{ github.event.inputs.repository }} ./source_code
          fi
          
          # 清理凭据
          if [ -n "$REPO_TOKEN" ]; then
            git config --global --unset url."https://${REPO_TOKEN}@github.com/".insteadOf
          fi

      - name: 处理虚拟文件
        if: ${{ github.event.inputs.files_json != '' }}
        env:
          FILES_JSON: ${{ github.event.inputs.files_json }}
        run: |
          echo "开始处理虚拟文件..."
          
          # 掩码处理files_json内容
          echo "::add-mask::$FILES_JSON"
          
          # 将JSON字符串保存到临时文件，不输出内容
          echo "$FILES_JSON" > files.json 2>/dev/null
          
          # 检查JSON文件是否有效
          if ! jq empty files.json 2>/dev/null; then
            echo "错误: 提供的文件JSON无效"
            # 不显示文件内容，避免泄露敏感信息
            exit 1
          fi
          
          # 获取文件数量
          FILES_COUNT=$(jq 'length' files.json)
          echo "检测到 $FILES_COUNT 个虚拟文件/目录"
          
          # 处理每个文件
          cd source_code
          jq -c 'to_entries[]' ../files.json | while read -r entry; do
            FILE_PATH=$(echo $entry | jq -r '.key')
            FILE_CONTENT=$(echo $entry | jq -r '.value.content')
            # 掩码处理文件内容
            echo "::add-mask::$FILE_CONTENT"
            FILE_SIZE=$(echo $entry | jq -r '.value.size')
            
            # 检查是否为虚拟目录
            if [[ "$FILE_PATH" == *"__virtual_dir__" ]]; then
              DIR_PATH=$(dirname "$FILE_PATH")
              echo "创建虚拟目录: $DIR_PATH"
              mkdir -p "$DIR_PATH"
              continue
            fi
            
            # 不显示文件大小，避免泄露信息
            echo "处理文件: $FILE_PATH"
            
            # 创建父目录
            mkdir -p "$(dirname "$FILE_PATH")"
            
            # 写入文件内容，不输出任何信息
            echo "$FILE_CONTENT" > "$FILE_PATH" 2>/dev/null
            
            # 验证文件是否创建成功，但不显示大小
            if [ -f "$FILE_PATH" ]; then
              echo "- 文件创建成功: $FILE_PATH"
            else
              echo "- 警告: 文件创建失败: $FILE_PATH"
            fi
          done
          
          echo "虚拟文件处理完成"
          
          # 检查Dockerfile是否存在
          if [ ! -f "${{ github.event.inputs.dockerfile }}" ]; then
            echo "错误: 在仓库中找不到指定的Dockerfile: ${{ github.event.inputs.dockerfile }}"
            # 不显示文件列表，避免泄露敏感信息
            exit 1
          else
            echo "已找到Dockerfile: ${{ github.event.inputs.dockerfile }}"
          fi
          
          cd ..
          rm files.json

      - name: 检查Dockerfile
        if: ${{ github.event.inputs.files_json == '' }}
        run: |
          # 检查Dockerfile是否存在
          if [ ! -f "./source_code/${{ github.event.inputs.dockerfile }}" ]; then
            echo "错误: 在仓库中找不到指定的Dockerfile: ${{ github.event.inputs.dockerfile }}"
            exit 1
          fi

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: 登录到Docker仓库
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.build_info.outputs.image_registry }}
          username: ${{ github.event.inputs.docker_username }}
          password: ${{ steps.decrypt.outputs.docker_password }}

      - name: 构建并推送多平台Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: ./source_code
          file: ./source_code/${{ github.event.inputs.dockerfile }}
          push: true
          tags: ${{ env.final_image }}
          platforms: ${{ github.event.inputs.platforms }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
          labels: |
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            org.opencontainers.image.source=${{ github.event.inputs.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: 获取镜像信息
        id: image_info
        run: |
          echo "获取镜像详细信息..."
          IMAGE_NAME="${{ env.final_image }}"
          
          # 掩码处理镜像名称
          echo "::add-mask::$IMAGE_NAME"
          
          # 从镜像名称中提取镜像ID
          echo "拉取镜像中..."
          docker pull $IMAGE_NAME > /dev/null 2>&1
          
          # 获取镜像大小
          IMAGE_SIZE=$(docker inspect $IMAGE_NAME --format='{{.Size}}')
          SIZE_MB=$(echo "scale=2; $IMAGE_SIZE/1024/1024" | bc)
          SIZE_GB=$(echo "scale=2; $IMAGE_SIZE/1024/1024/1024" | bc)
          
          # 获取镜像ID但只显示前12个字符
          IMAGE_ID=$(docker inspect $IMAGE_NAME --format='{{.Id}}' | cut -d':' -f2 | cut -c1-12)
          echo "镜像ID: $IMAGE_ID"
          echo "镜像大小: $SIZE_MB MB ($SIZE_GB GB)"
          
          # 不显示完整的创建时间，避免泄露敏感信息
          echo "镜像架构: $(docker inspect $IMAGE_NAME --format='{{.Os}}/{{.Architecture}}')"
          
          echo "image_size=$SIZE_MB MB ($SIZE_GB GB)" >> $GITHUB_ENV
          
          # 不显示镜像层信息，避免泄露敏感信息
          echo "镜像层信息已记录但不显示，避免泄露敏感信息"

      - name: 镜像安全扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.final_image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: '5m'

      - name: 上传扫描结果
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: 构建完成通知
        run: |
          echo "Docker镜像构建完成!"
          # 不显示完整镜像名称，避免泄露敏感信息
          IMAGE_REGISTRY="${{ steps.build_info.outputs.image_registry }}"
          IMAGE_TAG="${{ steps.build_info.outputs.image_tag }}"
          echo "镜像: ${IMAGE_REGISTRY}/***:${IMAGE_TAG}"
          echo "镜像大小: ${{ env.image_size }}"
          echo "平台: ${{ github.event.inputs.platforms }}"
          
      - name: 构建状态输出
        if: always()
        id: build_status
        run: |
          echo "============================================================"
          echo "构建任务: ${{ github.event.inputs.workflow_name || 'Docker构建任务' }}"
          echo "构建状态: ${{ job.status }}"
          echo "构建时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
          # 不显示完整镜像信息，避免泄露敏感信息
          IMAGE_REGISTRY="${{ steps.build_info.outputs.image_registry }}"
          IMAGE_NAME="${{ steps.build_info.outputs.image_name }}"
          IMAGE_TAG="${{ steps.build_info.outputs.image_tag }}"
          echo "构建镜像: ${IMAGE_REGISTRY}/***:${IMAGE_TAG}"
          
          echo "构建平台: ${{ github.event.inputs.platforms }}"
          echo "============================================================"
          
          # 提供工作流运行链接，方便前端直接查看构建过程
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "查询构建状态: $WORKFLOW_URL"
          echo "workflow_url=$WORKFLOW_URL" >> $GITHUB_OUTPUT
          echo "============================================================"
          
      - name: 设置构建结果输出
        if: always()
        id: build_result
        run: |
          # 创建包含工作流运行URL的JSON输出
          cat > build_result.json << EOF
          {
            "workflow_name": "${{ github.event.inputs.workflow_name || 'Docker构建任务' }}",
            "status": "${{ job.status }}",
            "build_time": "$(date -u +'%Y-%m-%d %H:%M:%S UTC')",
            "workflow_url": "${{ steps.build_status.outputs.workflow_url }}",
            "image_registry": "${{ steps.build_info.outputs.image_registry }}",
            "image_tag": "${{ steps.build_info.outputs.image_tag }}",
            "image_size": "${{ env.image_size }}",
            "platforms": "${{ github.event.inputs.platforms }}"
          }
          EOF
          
          # 将结果输出到GITHUB_OUTPUT，便于其他工作流或API获取
          echo "workflow_name=${{ github.event.inputs.workflow_name || 'Docker构建任务' }}" >> $GITHUB_OUTPUT
          echo "status=${{ job.status }}" >> $GITHUB_OUTPUT
          echo "workflow_url=${{ steps.build_status.outputs.workflow_url }}" >> $GITHUB_OUTPUT
          
          echo "构建结果JSON已生成，前端可通过API获取此信息"
      
      - name: 上传构建结果
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-result-${{ github.run_id }}
          path: build_result.json
          retention-days: 7
          
    outputs:
      workflow_name: ${{ steps.build_result.outputs.workflow_name }}
      status: ${{ steps.build_result.outputs.status }}
      workflow_url: ${{ steps.build_result.outputs.workflow_url }}