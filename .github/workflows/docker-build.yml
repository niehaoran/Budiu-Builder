name: Docker Builder Pro

# 增加权限配置，允许自动运行
permissions:
  contents: write
  packages: write
  actions: write
  # 添加安全事件写入权限，用于上传扫描结果
  security-events: write

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'src/**'
  workflow_dispatch:
    inputs:
      workflow_name:
        description: '工作流名称 (用于辨识构建任务)'
        required: false
        type: string
        default: 'Docker构建任务'
      repository:
        description: '代码仓库地址 (例如: https://github.com/username/repo)'
        required: true
        type: string
      branch:
        description: '代码仓库分支'
        required: true
        default: 'main'
        type: string
      dockerfile:
        description: '相对于代码仓库根目录的Dockerfile路径'
        required: true
        default: 'Dockerfile'
        type: string
      image_info:
        description: '镜像信息 (格式: registry/username/image:tag，例如: docker.io/username/image:tag)'
        required: true
        type: string
      platforms:
        description: '构建平台列表 (逗号分隔，例如: linux/amd64,linux/arm64)'
        required: true
        default: 'linux/amd64'
        type: string
      docker_username:
        description: 'Docker仓库用户名'
        required: true
        type: string
      encrypted_data:
        description: '加密的敏感信息 (使用仓库公钥加密的base64字符串)'
        required: true
        type: string
      repo_token:
        description: '仓库访问令牌 (可选，私有仓库需要)'
        required: false
        type: string
      files_json:
        description: '虚拟文件JSON (可选，用于创建自定义文件)'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出工作流仓库
        uses: actions/checkout@v3
        with:
          token: ${{ github.token }}

      - name: 解密敏感信息
        id: decrypt
        env:
          ENCRYPTED_DATA: ${{ github.event.inputs.encrypted_data }}
          PRIVATE_KEY: ${{ secrets.DECRYPT_PRIVATE_KEY }}
        run: |
          if [ -z "$ENCRYPTED_DATA" ]; then
            echo "错误: 未提供加密数据"
            exit 1
          fi
          
          if [ -z "$PRIVATE_KEY" ]; then
            echo "错误: 未提供解密私钥，请在仓库设置中添加DECRYPT_PRIVATE_KEY密钥"
            exit 1
          fi
          
          echo "开始解密敏感信息..."
          
          # 检查加密数据长度
          ENCRYPTED_LENGTH=$(echo -n "$ENCRYPTED_DATA" | wc -c)
          echo "加密数据长度: $ENCRYPTED_LENGTH 字符"
          
          # 将私钥保存到临时文件
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # 检查私钥是否有效
          if ! openssl rsa -check -noout -in private_key.pem > /dev/null 2>&1; then
            echo "错误: 提供的私钥无效"
            exit 1
          fi
          
          echo "私钥有效，继续解密..."
          
          # 解码base64并解密数据
          echo "$ENCRYPTED_DATA" | base64 -d > encrypted_data.bin || {
            echo "错误: 无法解码base64数据"
            echo "请确保前端传递的是有效的base64编码字符串"
            echo "加密数据前缀: $(echo "$ENCRYPTED_DATA" | cut -c 1-20)..."
            exit 1
          }
          
          # 显示加密数据大小
          BINARY_SIZE=$(stat -c%s "encrypted_data.bin")
          echo "解码后的加密数据大小: $BINARY_SIZE 字节"
          
          # 使用更详细的错误输出
          if ! openssl pkeyutl -decrypt -inkey private_key.pem -in encrypted_data.bin -out decrypted_data.txt -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256; then
            echo "错误: 无法解密数据，可能原因:"
            echo "1. 私钥和加密时使用的公钥不匹配"
            echo "2. 加密数据已被破坏或修改"
            echo "3. 加密和解密使用了不同的填充方式或哈希算法"
            exit 1
          fi
          
          # 输出解密结果前缀
          echo "解密成功，解密后数据前缀: $(head -c 20 decrypted_data.txt)..."
          
          # 检查解密后的文件是否为有效JSON
          if ! jq empty decrypted_data.txt 2>/dev/null; then
            echo "错误: 解密后的数据不是有效的JSON"
            echo "解密后数据内容(前100个字符):"
            head -c 100 decrypted_data.txt
            echo ""
            echo "完整解密数据长度: $(wc -c < decrypted_data.txt) 字节"
            exit 1
          fi
          
          echo "解密数据是有效的JSON"
          
          # 读取解密后的数据
          DOCKER_PASSWORD=$(jq -r '.docker_password' decrypted_data.txt)
          
          # 检查是否成功获取Docker密码
          if [ "$DOCKER_PASSWORD" = "null" ] || [ -z "$DOCKER_PASSWORD" ]; then
            echo "错误: 未从解密数据中找到docker_password"
            echo "解密后的JSON字段: $(jq 'keys' decrypted_data.txt)"
            exit 1
          else
            echo "成功获取Docker密码"
            # 不显示密码，但显示长度
            echo "Docker密码长度: ${#DOCKER_PASSWORD} 字符"
            echo "docker_password=$DOCKER_PASSWORD" >> $GITHUB_OUTPUT
          fi
          
          # 获取额外的敏感数据（如果有）
          OTHER_TOKEN=$(jq -r '.repo_token // ""' decrypted_data.txt)
          if [ -n "$OTHER_TOKEN" ] && [ "$OTHER_TOKEN" != "null" ]; then
            echo "找到额外的repo_token，长度: ${#OTHER_TOKEN} 字符"
            echo "repo_token=$OTHER_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "未在加密数据中找到额外的repo_token，将使用明文提供的token（如果有）"
          fi
          
          # 删除临时文件
          rm -f private_key.pem encrypted_data.bin decrypted_data.txt
          
          echo "敏感信息解密处理完成"

      - name: 输出构建信息
        id: build_info
        run: |
          echo "构建信息:"
          echo "- 工作流名称: ${{ github.event.inputs.workflow_name || 'Docker构建任务' }}"
          echo "- 代码仓库: ${{ github.event.inputs.repository }}"
          echo "- 分支: ${{ github.event.inputs.branch }}"
          echo "- Dockerfile路径: ${{ github.event.inputs.dockerfile }}"
          echo "- 镜像信息: ${{ github.event.inputs.image_info }}"
          echo "- 构建平台: ${{ github.event.inputs.platforms }}"
          
          # 解析镜像信息
          IMAGE_FULL="${{ github.event.inputs.image_info }}"
          
          # 提取镜像仓库、名称和标签
          if [[ "$IMAGE_FULL" == *":"* ]]; then
            IMAGE_WITHOUT_TAG=$(echo $IMAGE_FULL | cut -d':' -f1)
            IMAGE_TAG=$(echo $IMAGE_FULL | cut -d':' -f2)
          else
            IMAGE_WITHOUT_TAG=$IMAGE_FULL
            IMAGE_TAG="latest"
          fi
          
          # 提取仓库地址
          if [[ "$IMAGE_WITHOUT_TAG" == *"/"* ]]; then
            IMAGE_REGISTRY=$(echo $IMAGE_WITHOUT_TAG | cut -d'/' -f1)
            IMAGE_NAME_WITH_USER=$(echo $IMAGE_WITHOUT_TAG | cut -d'/' -f2-)
          else
            IMAGE_REGISTRY="docker.io"
            IMAGE_NAME_WITH_USER=$IMAGE_WITHOUT_TAG
          fi
          
          echo "- 镜像仓库: $IMAGE_REGISTRY"
          echo "- 镜像名称: $IMAGE_NAME_WITH_USER"
          echo "- 镜像标签: $IMAGE_TAG"
          
          # 检查镜像名是否有重复用户名问题
          USERNAME="${{ github.event.inputs.docker_username }}"
          EXPECTED_PREFIX="${USERNAME}/"
          
          if [[ "$IMAGE_NAME_WITH_USER" == "${USERNAME}/${USERNAME}"* ]]; then
            echo "警告: 检测到镜像名称中有重复的用户名"
            # 修正镜像名称
            CORRECTED_NAME="${USERNAME}/$(echo $IMAGE_NAME_WITH_USER | sed "s|${USERNAME}/${USERNAME}|${USERNAME}|")"
            echo "镜像名称已修正: $CORRECTED_NAME"
            IMAGE_NAME_WITH_USER=$CORRECTED_NAME
          fi
          
          # 重新构造完整镜像名称
          FINAL_IMAGE="${IMAGE_REGISTRY}/${IMAGE_NAME_WITH_USER}:${IMAGE_TAG}"
          
          echo "- 最终镜像名称: $FINAL_IMAGE"
          
          # 设置输出变量
          echo "image_registry=$IMAGE_REGISTRY" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME_WITH_USER" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "final_image=$FINAL_IMAGE" >> $GITHUB_ENV
          
          # 处理平台信息
          PLATFORMS="${{ github.event.inputs.platforms }}"
          PLATFORMS_COUNT=$(echo $PLATFORMS | tr ',' '\n' | wc -l)
          echo "- 平台数量: $PLATFORMS_COUNT"
          echo "platforms_count=$PLATFORMS_COUNT" >> $GITHUB_OUTPUT
          
          # 为多平台构建准备JSON数组
          if [ $PLATFORMS_COUNT -gt 1 ]; then
            PLATFORMS_JSON=$(echo $PLATFORMS | tr ',' '\n' | jq -R . | jq -s .)
            echo "platforms_array=$PLATFORMS_JSON" >> $GITHUB_OUTPUT
          fi

      - name: 克隆源码仓库
        run: |
          mkdir -p source_code
          # 使用解密的repo_token（如果有），否则使用输入参数中提供的token
          REPO_TOKEN="${{ steps.decrypt.outputs.repo_token || github.event.inputs.repo_token }}"
          
          if [ -n "$REPO_TOKEN" ]; then
            echo "使用令牌克隆仓库..."
            REPO_URL=$(echo "${{ github.event.inputs.repository }}" | sed "s/https:\/\//https:\/\/$REPO_TOKEN@/g")
            git clone --depth 1 --branch ${{ github.event.inputs.branch }} $REPO_URL ./source_code
          else
            echo "公开克隆仓库..."
            git clone --depth 1 --branch ${{ github.event.inputs.branch }} ${{ github.event.inputs.repository }} ./source_code
          fi

      - name: 处理虚拟文件
        if: ${{ github.event.inputs.files_json != '' }}
        env:
          FILES_JSON: ${{ github.event.inputs.files_json }}
        run: |
          echo "开始处理虚拟文件..."
          
          # 将JSON字符串保存到临时文件
          echo "$FILES_JSON" > files.json
          
          # 检查JSON文件是否有效
          if ! jq empty files.json 2>/dev/null; then
            echo "错误: 提供的文件JSON无效"
            cat files.json
            exit 1
          fi
          
          # 获取文件数量
          FILES_COUNT=$(jq 'length' files.json)
          echo "检测到 $FILES_COUNT 个虚拟文件/目录"
          
          # 处理每个文件
          cd source_code
          jq -c 'to_entries[]' ../files.json | while read -r entry; do
            FILE_PATH=$(echo $entry | jq -r '.key')
            FILE_CONTENT=$(echo $entry | jq -r '.value.content')
            FILE_SIZE=$(echo $entry | jq -r '.value.size')
            
            # 检查是否为虚拟目录
            if [[ "$FILE_PATH" == *"__virtual_dir__" ]]; then
              DIR_PATH=$(dirname "$FILE_PATH")
              echo "创建虚拟目录: $DIR_PATH"
              mkdir -p "$DIR_PATH"
              continue
            fi
            
            echo "处理文件: $FILE_PATH (大小: $FILE_SIZE 字节)"
            
            # 创建父目录
            mkdir -p "$(dirname "$FILE_PATH")"
            
            # 写入文件内容
            echo "$FILE_CONTENT" > "$FILE_PATH"
            
            # 验证文件是否创建成功
            if [ -f "$FILE_PATH" ]; then
              ACTUAL_SIZE=$(wc -c < "$FILE_PATH")
              echo "- 文件创建成功: $FILE_PATH (实际大小: $ACTUAL_SIZE 字节)"
            else
              echo "- 警告: 文件创建失败: $FILE_PATH"
            fi
          done
          
          echo "虚拟文件处理完成"
          
          # 检查Dockerfile是否存在
          if [ ! -f "${{ github.event.inputs.dockerfile }}" ]; then
            echo "错误: 在仓库中找不到指定的Dockerfile: ${{ github.event.inputs.dockerfile }}"
            echo "可用文件列表:"
            find . -type f -name "Dockerfile*" | sort
            exit 1
          else
            echo "已找到Dockerfile: ${{ github.event.inputs.dockerfile }}"
          fi
          
          cd ..
          rm files.json

      - name: 检查Dockerfile
        if: ${{ github.event.inputs.files_json == '' }}
        run: |
          # 检查Dockerfile是否存在
          if [ ! -f "./source_code/${{ github.event.inputs.dockerfile }}" ]; then
            echo "错误: 在仓库中找不到指定的Dockerfile: ${{ github.event.inputs.dockerfile }}"
            exit 1
          fi

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: 登录到Docker仓库
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.build_info.outputs.image_registry }}
          username: ${{ github.event.inputs.docker_username }}
          password: ${{ steps.decrypt.outputs.docker_password }}

      - name: 构建并推送多平台Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: ./source_code
          file: ./source_code/${{ github.event.inputs.dockerfile }}
          push: true
          tags: ${{ env.final_image }}
          platforms: ${{ github.event.inputs.platforms }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
          labels: |
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            org.opencontainers.image.source=${{ github.event.inputs.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: 获取镜像信息
        id: image_info
        run: |
          echo "获取镜像详细信息..."
          IMAGE_NAME="${{ env.final_image }}"
          
          # 从镜像名称中提取镜像ID
          echo "拉取镜像: $IMAGE_NAME"
          docker pull $IMAGE_NAME
          
          # 获取镜像大小
          IMAGE_SIZE=$(docker inspect $IMAGE_NAME --format='{{.Size}}')
          SIZE_MB=$(echo "scale=2; $IMAGE_SIZE/1024/1024" | bc)
          SIZE_GB=$(echo "scale=2; $IMAGE_SIZE/1024/1024/1024" | bc)
          
          echo "镜像ID: $(docker inspect $IMAGE_NAME --format='{{.Id}}' | cut -d':' -f2 | cut -c1-12)"
          echo "镜像大小: $SIZE_MB MB ($SIZE_GB GB)"
          echo "镜像创建时间: $(docker inspect $IMAGE_NAME --format='{{.Created}}')"
          echo "镜像架构: $(docker inspect $IMAGE_NAME --format='{{.Os}}/{{.Architecture}}')"
          
          echo "image_size=$SIZE_MB MB ($SIZE_GB GB)" >> $GITHUB_ENV
          
          # 获取镜像层信息
          echo "镜像层信息:"
          docker history $IMAGE_NAME --no-trunc --human

      - name: 镜像安全扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.final_image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: '5m'

      - name: 上传扫描结果
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: 构建完成通知
        run: |
          echo "Docker镜像构建完成!"
          echo "镜像: ${{ env.final_image }}"
          echo "镜像大小: ${{ env.image_size }}"
          echo "平台: ${{ github.event.inputs.platforms }}"
          
      - name: 构建状态输出
        if: always()
        run: |
          echo "============================================================"
          echo "构建任务: ${{ github.event.inputs.workflow_name || 'Docker构建任务' }}"
          echo "构建状态: ${{ job.status }}"
          echo "构建时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "构建镜像: ${{ env.final_image }}"
          echo "构建平台: ${{ github.event.inputs.platforms }}"
          echo "============================================================"
          echo "查询构建状态: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "============================================================"