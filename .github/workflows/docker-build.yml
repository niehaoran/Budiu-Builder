name: Docker Build Workflow

# 增加权限配置，允许自动运行
permissions:
  contents: write
  packages: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      repo_config:
        description: '代码仓库配置 (JSON格式: {"url":"仓库地址", "branch":"分支名", "token":"私有仓库访问令牌"})'
        required: true
        type: string
        default: '{"url":"", "branch":"main", "token":""}'
      dockerfile_config:
        description: '构建配置 (JSON格式: {"source":"repo/upload", "path":"Dockerfile路径"})'
        required: true
        type: string
        default: '{"source":"repo", "path":"Dockerfile"}'
      docker_registry:
        description: 'Docker镜像仓库地址'
        required: true
        type: string
      docker_auth:
        description: 'Docker认证 (JSON格式: {"username":"用户名", "password":"密码"})'
        required: true
        type: string
        default: '{"username":"", "password":""}'
      image_config:
        description: 'Docker镜像配置 (JSON格式: {"name":"镜像名称", "tag":"标签"})'
        required: true
        type: string
        default: '{"name":"", "tag":"latest"}'
      github_token:
        description: 'GitHub Token (用于自动授权，可选)'
        required: false
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # 添加环境配置，使工作流可以直接运行
    environment: production
    steps:
      - name: 解析JSON配置
        id: parse_config
        run: |
          # 解析代码仓库配置
          echo "::set-output name=repo_url::$(echo '${{ github.event.inputs.repo_config }}' | jq -r '.url')"
          echo "::set-output name=repo_branch::$(echo '${{ github.event.inputs.repo_config }}' | jq -r '.branch')"
          echo "::set-output name=repo_token::$(echo '${{ github.event.inputs.repo_config }}' | jq -r '.token')"
          
          # 解析Dockerfile配置
          echo "::set-output name=dockerfile_source::$(echo '${{ github.event.inputs.dockerfile_config }}' | jq -r '.source')"
          echo "::set-output name=dockerfile_path::$(echo '${{ github.event.inputs.dockerfile_config }}' | jq -r '.path')"
          
          # 解析Docker认证
          echo "::set-output name=docker_username::$(echo '${{ github.event.inputs.docker_auth }}' | jq -r '.username')"
          echo "::set-output name=docker_password::$(echo '${{ github.event.inputs.docker_auth }}' | jq -r '.password')"
          
          # 解析镜像配置
          echo "::set-output name=image_name::$(echo '${{ github.event.inputs.image_config }}' | jq -r '.name')"
          echo "::set-output name=image_tag::$(echo '${{ github.event.inputs.image_config }}' | jq -r '.tag')"

      - name: 检查参数
        run: |
          echo "构建参数检查..."
          echo "仓库地址: ${{ steps.parse_config.outputs.repo_url }}"
          echo "Dockerfile来源: ${{ steps.parse_config.outputs.dockerfile_source }}"
          echo "Docker仓库: ${{ github.event.inputs.docker_registry }}"

      - name: 检出源代码
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: main
          # 使用GitHub Token进行授权，优先使用传入的token，否则使用默认token
          token: ${{ github.event.inputs.github_token || secrets.GITHUB_TOKEN }}

      - name: 创建工作目录
        run: |
          mkdir -p workspace
          cd workspace

      - name: 克隆目标仓库
        run: |
          if [ -n "${{ steps.parse_config.outputs.repo_token }}" ]; then
            # 私有仓库，添加凭证
            REPO_URL=$(echo "${{ steps.parse_config.outputs.repo_url }}" | sed "s/https:\/\//https:\/\/${{ steps.parse_config.outputs.repo_token }}@/g")
            git clone --branch ${{ steps.parse_config.outputs.repo_branch }} $REPO_URL ./source_code
          else
            # 公开仓库
            git clone --branch ${{ steps.parse_config.outputs.repo_branch }} ${{ steps.parse_config.outputs.repo_url }} ./source_code
          fi

      - name: 准备Dockerfile
        run: |
          if [ "${{ steps.parse_config.outputs.dockerfile_source }}" == "repo" ]; then
            echo "使用仓库中的Dockerfile: ${{ steps.parse_config.outputs.dockerfile_path }}"
            cp -f ./source_code/${{ steps.parse_config.outputs.dockerfile_path }} ./Dockerfile
            if [ ! -f "./Dockerfile" ]; then
              echo "错误: 在仓库中找不到指定的Dockerfile!"
              exit 1
            fi
          else
            echo "使用上传的Dockerfile"
            echo "注意: 此示例中，上传的Dockerfile功能需要通过前端页面上传"
            # 前端上传的Dockerfile会通过API保存，这里仅作为演示
            if [ ! -f "./uploads/Dockerfile" ]; then
              echo "错误: 未找到上传的Dockerfile!"
              exit 1
            fi
            cp -f ./uploads/Dockerfile ./Dockerfile
          fi
          cat ./Dockerfile

      - name: 登录到Docker仓库
        uses: docker/login-action@v2
        with:
          registry: ${{ github.event.inputs.docker_registry }}
          username: ${{ steps.parse_config.outputs.docker_username }}
          password: ${{ steps.parse_config.outputs.docker_password }}

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 构建并推送Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: ./source_code
          file: ./Dockerfile
          push: true
          tags: ${{ github.event.inputs.docker_registry }}/${{ steps.parse_config.outputs.image_name }}:${{ steps.parse_config.outputs.image_tag }}

      - name: 构建结果
        run: |
          echo "Docker镜像构建完成!"
          echo "镜像: ${{ github.event.inputs.docker_registry }}/${{ steps.parse_config.outputs.image_name }}:${{ steps.parse_config.outputs.image_tag }}" 