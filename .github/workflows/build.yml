name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: '代码仓库地址 (GitHub或Gitee)'
        required: true
      branch:
        description: '分支名称'
        default: 'main'
        required: true
      image_name:
        description: '镜像名称'
        required: true
      image_tag:
        description: '镜像标签'
        default: 'latest'
        required: true
      registry:
        description: '镜像仓库地址'
        default: 'docker.io'
        required: true
      callback_url:
        description: '回调通知URL'
        required: false
      docker_auth:
        description: 'Docker认证(格式:username:password)'
        required: true
      ai_options:
        description: 'AI优化选项(size|security|speed)'
        default: 'size'
        required: false
      repo_token:
        description: '仓库访问令牌(私有仓库需要)'
        required: false

# 权限设置 - 包含AI访问
permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检查输入参数
        run: |
          echo "代码仓库: ${{ github.event.inputs.repo_url }}"
          echo "分支: ${{ github.event.inputs.branch }}"
          echo "镜像名称: ${{ github.event.inputs.image_name }}"
          echo "镜像标签: ${{ github.event.inputs.image_tag }}"
          echo "镜像仓库: ${{ github.event.inputs.registry }}"

      - name: 克隆源代码
        run: |
          repo_url="${{ github.event.inputs.repo_url }}"
          repo_token="${{ github.event.inputs.repo_token }}"
          branch="${{ github.event.inputs.branch }}"
          
          # 直接使用用户提供的分支
          echo "使用用户指定分支: $branch"
          
          # 处理私有仓库的身份验证
          if [ -n "$repo_token" ]; then
            # GitHub 仓库
            if [[ $repo_url == *github.com* ]]; then
              auth_repo_url=$(echo $repo_url | sed "s/https:\/\//https:\/\/$repo_token@/")
              git clone --depth 1 -b $branch $auth_repo_url src || git clone --depth 1 $auth_repo_url src
            
            # Gitee 仓库
            elif [[ $repo_url == *gitee.com* ]]; then
              auth_repo_url=$(echo $repo_url | sed "s/https:\/\//https:\/\/$repo_token@/")
              git clone --depth 1 -b $branch $auth_repo_url src || git clone --depth 1 $auth_repo_url src
            
            else
              echo "不支持的仓库类型，但尝试使用令牌进行克隆"
              auth_repo_url=$(echo $repo_url | sed "s/https:\/\//https:\/\/$repo_token@/")
              git clone --depth 1 -b $branch $auth_repo_url src || git clone --depth 1 $auth_repo_url src
            fi
          else
            # 公开仓库，无需令牌
            git clone --depth 1 -b $branch $repo_url src || git clone --depth 1 $repo_url src
          fi
          
          if [ ! -d "src" ]; then
            echo "克隆失败，请检查仓库地址和分支名称是否正确"
            exit 1
          fi
        shell: bash

      # 登录Docker仓库
      - name: 登录镜像仓库
        run: |
          # 分割Docker认证字符串
          DOCKER_AUTH="${{ github.event.inputs.docker_auth }}"
          DOCKER_USERNAME=$(echo $DOCKER_AUTH | cut -d':' -f1)
          DOCKER_PASSWORD=$(echo $DOCKER_AUTH | cut -d':' -f2-)
          
          # 使用Docker登录命令
          echo $DOCKER_PASSWORD | docker login ${{ github.event.inputs.registry }} -u $DOCKER_USERNAME --password-stdin
        shell: bash
        
      # 设置Docker Buildx
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # 项目预检测
      - name: 项目预检测
        id: project-detection
        run: |
          cd src
          
          # 检查是否存在自定义Dockerfile
          if [ -f "Dockerfile" ]; then
            echo "检测到自定义Dockerfile，将使用项目已有的Dockerfile"
            echo "use_existing_dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "未检测到Dockerfile，将使用AI生成"
            echo "use_existing_dockerfile=false" >> $GITHUB_OUTPUT
            
            # 收集项目信息以辅助AI分析
            echo "项目结构:" >> project_info.txt
            find . -type f -name "*.json" -o -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.java" -o -name "*.xml" -o -name "*.go" | sort >> project_info.txt
            
            # 检测主要技术栈
            if [ -f "package.json" ]; then
              echo "检测到Node.js项目" >> project_info.txt
              echo "package.json内容:" >> project_info.txt
              cat package.json >> project_info.txt
            elif [ -f "requirements.txt" ]; then
              echo "检测到Python项目" >> project_info.txt
              echo "requirements.txt内容:" >> project_info.txt
              cat requirements.txt >> project_info.txt
            elif [ -f "pom.xml" ]; then
              echo "检测到Java项目" >> project_info.txt
              echo "pom.xml关键依赖:" >> project_info.txt
              grep -A 5 -B 5 "<dependency>" pom.xml >> project_info.txt
            elif [ -f "go.mod" ]; then
              echo "检测到Go项目" >> project_info.txt
              echo "go.mod内容:" >> project_info.txt
              cat go.mod >> project_info.txt
            fi
          fi
        shell: bash

      # 使用讯飞星火Spark Lite生成Dockerfile
      - name: 使用讯飞星火Spark Lite生成Dockerfile
        if: steps.project-detection.outputs.use_existing_dockerfile == 'false'
        id: generate-dockerfile
        run: |
          cd src
          echo "开始使用讯飞星火AI分析项目并生成Dockerfile..."
          
          # 准备更详细的项目分析
          echo "正在进行深度项目分析..."
          
          # 检查入口文件
          if [ -f "package.json" ]; then
            echo "分析Node.js入口点和依赖项..."
            # 使用更健壮的方式提取package.json信息
            if [ -x "$(command -v jq)" ]; then
              # 如果有jq命令，使用jq解析json
              MAIN_FILE=$(jq -r '.main // ""' package.json 2>/dev/null || echo "")
              START_SCRIPT=$(jq -r '.scripts.start // ""' package.json 2>/dev/null || echo "")
              BUILD_SCRIPT=$(jq -r '.scripts.build // ""' package.json 2>/dev/null || echo "")
            else
              # 备用方案：使用更简单的grep模式且添加错误处理
              MAIN_FILE=$(grep -o '"main"\s*:\s*"[^"]*"' package.json 2>/dev/null | sed 's/.*"main"\s*:\s*"\([^"]*\)".*/\1/' || echo "")
              START_SCRIPT=$(grep -o '"start"\s*:\s*"[^"]*"' package.json 2>/dev/null | sed 's/.*"start"\s*:\s*"\([^"]*\)".*/\1/' || echo "")
              BUILD_SCRIPT=$(grep -o '"build"\s*:\s*"[^"]*"' package.json 2>/dev/null | sed 's/.*"build"\s*:\s*"\([^"]*\)".*/\1/' || echo "")
            fi
            
            echo "主入口文件: ${MAIN_FILE:-未指定}" >> ../project_analysis.txt
            echo "启动脚本: ${START_SCRIPT:-未指定}" >> ../project_analysis.txt
            echo "构建脚本: ${BUILD_SCRIPT:-未指定}" >> ../project_analysis.txt
          elif [ -f "requirements.txt" ]; then
            echo "分析Python应用结构..."
            # 查找可能的Python入口点
            FLASK_APP=$(grep -l "Flask(" $(find . -name "*.py" 2>/dev/null) 2>/dev/null | head -1 || echo "")
            DJANGO_APP=$(find . -name "manage.py" 2>/dev/null | head -1 || echo "")
            if [ -n "$FLASK_APP" ]; then
              echo "检测到Flask应用，入口点: $FLASK_APP" >> ../project_analysis.txt
            elif [ -n "$DJANGO_APP" ]; then
              echo "检测到Django应用，入口点: $DJANGO_APP" >> ../project_analysis.txt
            fi
          fi
          
          # 准备提示信息
          PROMPT="请仔细分析以下源代码仓库，创建一个生产级别的高质量Dockerfile。根据分析结果，考虑：

          1. 分析项目类型和依赖后，优先选择alpine版本的基础镜像（如node:14-alpine等）以减小体积
          2. 如果项目结构适合，考虑使用多阶段构建来分离构建环境和运行环境
          3. 仅复制实际需要的文件，避免包含.git、tests等非生产必要目录
          4. 合理安排层的顺序，将频繁变化的层放在后面以优化缓存
          5. 尽量合并RUN命令以减少层数
          6. 构建完成后清理不必要的缓存和临时文件
          7. 对于Node.js项目，使用--production标志安装依赖

          请注意：我只有5次机会获得正确的Dockerfile。如果生成的Dockerfile有错误，我会要求您重写，但最多只能尝试5次。"
          
          # 根据用户选择的优化选项调整提示
          AI_OPTION="${{ github.event.inputs.ai_options }}"
          if [ "$AI_OPTION" == "size" ] || [ -z "$AI_OPTION" ]; then
            PROMPT="$PROMPT

          您应该特别重视镜像体积的优化，包括：选择最小的基础镜像、删除所有缓存和临时文件、最小化层数。"
          elif [ "$AI_OPTION" == "security" ]; then
            PROMPT="$PROMPT
            
          您应该特别重视安全性，包括：选择官方维护良好的基础镜像、避免使用root用户、最小化攻击面、仅包含必要组件。"
          elif [ "$AI_OPTION" == "speed" ]; then
            PROMPT="$PROMPT
            
          您应该特别重视构建和运行速度，包括：优化构建缓存策略、预安装关键依赖、调整配置参数以提高启动和运行性能。"
          fi
          
          PROMPT="$PROMPT
          
          已收集的项目信息:
          $(cat ../project_info.txt 2>/dev/null || echo '未找到项目信息')
          $(cat ../project_analysis.txt 2>/dev/null || echo '')
          
          请生成完整的Dockerfile，不要包含任何注释或解释。"
          
          # 开始重试生成逻辑
          MAX_RETRIES=5
          RETRY_COUNT=0
          DOCKERFILE_VALID=false
          
          # 循环尝试生成Dockerfile，直到成功或达到最大重试次数
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$DOCKERFILE_VALID" != "true" ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            
            if [ $RETRY_COUNT -gt 1 ]; then
              echo "第 $RETRY_COUNT 次尝试生成Dockerfile (最多 $MAX_RETRIES 次)..."
              # 如果是重试，添加错误信息到提示中
              if [ -f "../dockerfile_error.txt" ]; then
                ERROR_FEEDBACK=$(cat ../dockerfile_error.txt)
                RETRY_PROMPT="上次生成的Dockerfile存在问题：$ERROR_FEEDBACK\n\n请修复以上问题并重新生成Dockerfile。这是第 $RETRY_COUNT 次尝试，共有 $MAX_RETRIES 次机会。"
                PROMPT="$PROMPT\n\n$RETRY_PROMPT"
              fi
            fi
            
            # 将PROMPT保存为文件
            echo "$PROMPT" > ../prompt.txt
            
            # 配置讯飞星火API参数
            # 使用HTTP服务接口认证信息中的APIPassword
            SPARK_API_PASSWORD="${{ secrets.SPARK_API_PASSWORD }}"
            
            # 检查密钥是否设置
            if [ -z "$SPARK_API_PASSWORD" ]; then
              echo "错误: 未设置SPARK_API_PASSWORD密钥。请在GitHub仓库的Settings > Secrets > Actions中添加此密钥。"
              echo "密钥值应为讯飞星火HTTP服务接口认证信息中的APIPassword。"
              exit 1
            fi
            
            # 生成请求URL
            AUTH_URL="https://spark-api-open.xf-yun.com/v1/chat/completions"
            
            # 读取PROMPT内容并转义为JSON字符串
            PROMPT_CONTENT=$(cat ../prompt.txt | sed 's/"/\\"/g' | tr '\n' ' ')
            
            # 构建请求体JSON - 参考Python示例，但使用非流式响应
            echo '{
              "model": "lite",
              "user": "github-actions-user",
              "messages": [
                {
                  "role": "user",
                  "content": "'$PROMPT_CONTENT'"
                }
              ],
              "temperature": 0.5,
              "max_tokens": 4096,
              "stream": false
            }' > ../spark_request.json
            
            # 执行HTTP请求
            echo "调用讯飞星火API生成Dockerfile..."
            curl -v -X POST "$AUTH_URL" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $SPARK_API_PASSWORD" \
              -d @../spark_request.json > ../ai_response.json 2> ../ai_response_headers.txt
            
            # 检查API调用是否成功
            if [ $? -ne 0 ]; then
              echo "讯飞星火API调用失败"
              cat ../ai_response_headers.txt
              exit 1
            fi
            
            # 显示API响应状态和详细信息
            echo "API响应头和状态码:"
            cat ../ai_response_headers.txt
            
            echo "API响应内容:"
            cat ../ai_response.json
            
            # 检查是否包含错误
            if grep -q "\"error\":" ../ai_response.json; then
              echo "API返回错误信息:"
              jq -r '.error.message // "未知错误"' ../ai_response.json 2>/dev/null || cat ../ai_response.json
              exit 1
            fi
            
            # 检查响应中是否有code字段
            CODE=$(jq -r '.code // "未返回code"' ../ai_response.json 2>/dev/null || echo "未返回code")
            if [ "$CODE" != "0" ] && [ "$CODE" != "未返回code" ]; then
              echo "讯飞星火API返回错误，错误代码: $CODE"
              echo "错误信息: $(jq -r '.message // "未知错误"' ../ai_response.json 2>/dev/null || echo "未知错误")"
              exit 1
            fi
            
            # 尝试两种可能的响应格式提取内容
            if jq -e '.choices[0].message.content' ../ai_response.json > /dev/null 2>&1; then
              # 标准OpenAI格式
              jq -r '.choices[0].message.content' ../ai_response.json > Dockerfile.raw
            elif jq -e '.payload.choices.text[0].content' ../ai_response.json > /dev/null 2>&1; then
              # 讯飞星火可能的另一种格式
              jq -r '.payload.choices.text[0].content' ../ai_response.json > Dockerfile.raw
            else
              # 如果上面都失败，尝试直接提取所有文本内容
              cat ../ai_response.json > Dockerfile.raw
            fi
            
            # 彻底清理Dockerfile内容，移除所有markdown格式和无效内容
            echo "清理Dockerfile格式..."
            # 临时文件用于处理
            cat Dockerfile.raw | grep -v '^\s*```' | grep -v '^\s*$' > Dockerfile.tmp
            
            # 检查是否包含FROM指令
            if grep -q "^FROM" Dockerfile.tmp; then
              # 提取有效Dockerfile内容 - 确保只包含有效指令
              echo "提取有效Dockerfile内容..."
              grep -E "^(FROM|COPY|ADD|RUN|WORKDIR|ENV|ARG|EXPOSE|CMD|ENTRYPOINT|VOLUME|USER|ONBUILD|STOPSIGNAL|HEALTHCHECK|SHELL)" Dockerfile.tmp > Dockerfile
            else
              # 创建基本Dockerfile
              echo "未找到有效的Dockerfile指令，创建基本Dockerfile..."
              echo "FROM node:14-alpine" > Dockerfile
              echo "WORKDIR /app" >> Dockerfile
              echo "COPY . ." >> Dockerfile
              echo "RUN if [ -f \"package.json\" ]; then npm install; fi" >> Dockerfile
              echo "CMD [\"npm\", \"start\"]" >> Dockerfile
            fi
            
            echo "生成的Dockerfile内容:"
            cat Dockerfile
            
            # 验证Dockerfile
            echo "验证Dockerfile..."
            # 检查是否存在循环依赖等问题
            docker buildx build -t dockerfile-validation-test . > ../dockerfile_validation.log 2>&1
            
            # 检查构建是否成功
            if [ $? -eq 0 ]; then
              echo "Dockerfile验证通过！"
              DOCKERFILE_VALID=true
              break
            else
              echo "Dockerfile验证失败，查找错误原因..."
              
              # 提取错误信息
              ERROR_MSG=$(grep -A 5 "ERROR:" ../dockerfile_validation.log | head -6)
              echo "$ERROR_MSG" > ../dockerfile_error.txt
              echo "错误信息: $ERROR_MSG"
              
              # 如果达到最大重试次数，则放弃
              if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                echo "达到最大重试次数($MAX_RETRIES)，无法生成有效的Dockerfile"
                echo "将使用基本的Dockerfile作为后备..."
                # 创建基本的后备Dockerfile
                echo "FROM node:14-alpine" > Dockerfile
                echo "WORKDIR /app" >> Dockerfile
                echo "COPY package*.json ./" >> Dockerfile
                echo "RUN npm install --production" >> Dockerfile
                echo "COPY . ." >> Dockerfile
                echo "CMD [\"npm\", \"start\"]" >> Dockerfile
              fi
            fi
          done
          
          echo "最终生成的Dockerfile:"
          cat Dockerfile
        shell: bash

      # 验证AI生成的Dockerfile
      - name: 验证Dockerfile
        if: steps.project-detection.outputs.use_existing_dockerfile == 'false'
        run: |
          cd src
          echo "验证AI生成的Dockerfile..."
          
          # 检查基础镜像是否是alpine版本
          if ! grep -q "alpine" Dockerfile; then
            echo "警告: 基础镜像不是alpine版本，替换为轻量级alpine镜像..."
            # 识别当前使用的node版本
            NODE_VER=$(grep -o "node:[0-9]*" Dockerfile | head -1 | cut -d':' -f2)
            NODE_VER=${NODE_VER:-14}
            # 备份原始Dockerfile
            cp Dockerfile Dockerfile.original
            # 替换基础镜像
            sed -i "s|FROM node:$NODE_VER|FROM node:$NODE_VER-alpine|g" Dockerfile
            # 如果没有多阶段构建，尝试添加
            if [ $(grep -c "FROM" Dockerfile) -eq 1 ]; then
              echo "警告: 未使用多阶段构建，添加构建和运行阶段..."
              NODE_VERSION=$NODE_VER
              
              echo "# 构建阶段" > Dockerfile.new
              echo "FROM node:${NODE_VERSION}-alpine AS builder" >> Dockerfile.new
              echo "WORKDIR /app" >> Dockerfile.new
              echo "COPY package*.json ./" >> Dockerfile.new
              echo "RUN npm ci --only=production || npm install --production" >> Dockerfile.new
              echo "COPY . ." >> Dockerfile.new
              echo "" >> Dockerfile.new
              echo "# 运行阶段" >> Dockerfile.new
              echo "FROM node:${NODE_VERSION}-alpine" >> Dockerfile.new
              echo "WORKDIR /app" >> Dockerfile.new
              echo "COPY --from=builder /app/package*.json ./" >> Dockerfile.new
              echo "COPY --from=builder /app/node_modules ./node_modules" >> Dockerfile.new
              echo "# 只复制需要的文件，避免复制node_modules等" >> Dockerfile.new
              echo "COPY --from=builder /app/src ./src" >> Dockerfile.new
              echo "COPY --from=builder /app/public ./public 2>/dev/null || true" >> Dockerfile.new
              echo "COPY --from=builder /app/*.js ./ 2>/dev/null || true" >> Dockerfile.new
              echo "COPY --from=builder /app/*.json ./ 2>/dev/null || true" >> Dockerfile.new
              echo "" >> Dockerfile.new
              echo "# 设置运行命令" >> Dockerfile.new
              echo "CMD [\"npm\", \"start\"]" >> Dockerfile.new

              mv Dockerfile.new Dockerfile
            else
              # 如果已有多阶段构建，检查是否有循环依赖
              echo "检查多阶段构建是否有循环依赖..."
              # 查找COPY --from=N指令中的N是否定义清晰
              # 创建临时文件进行修复
              cp Dockerfile Dockerfile.tmp
              
              # 获取阶段数量
              STAGE_COUNT=$(grep -c "^FROM" Dockerfile)
              
              # 如果没有明确的阶段命名，给第一个阶段添加名称
              if ! grep -q "FROM .* AS " Dockerfile; then
                # 给第一个FROM添加AS builder
                sed -i '0,/^FROM/s/^FROM \(.*\)$/FROM \1 AS builder/' Dockerfile.tmp
                # 将所有--from=0替换为--from=builder
                sed -i 's/COPY --from=0/COPY --from=builder/g' Dockerfile.tmp
              fi
              
              # 应用修改
              mv Dockerfile.tmp Dockerfile
            fi
          fi
          
          # 检查Dockerfile基本结构
          if ! grep -q "FROM" Dockerfile; then
            echo "警告: Dockerfile缺少FROM指令，添加默认基础镜像..."
            echo "FROM node:14-alpine" > Dockerfile.new
            cat Dockerfile >> Dockerfile.new
            mv Dockerfile.new Dockerfile
          fi
          
          # 确保包含WORKDIR
          if ! grep -q "WORKDIR" Dockerfile; then
            echo "警告: Dockerfile缺少WORKDIR指令，添加默认工作目录..."
            sed -i '/FROM/a WORKDIR /app' Dockerfile
          fi
          
          # 确保有COPY指令
          if ! grep -q "COPY" Dockerfile; then
            echo "警告: Dockerfile缺少COPY指令，添加默认文件复制..."
            echo "COPY . ." >> Dockerfile
          fi
          
          # 确保有CMD或ENTRYPOINT
          if ! grep -q "CMD" Dockerfile && ! grep -q "ENTRYPOINT" Dockerfile; then
            echo "警告: Dockerfile缺少CMD或ENTRYPOINT指令，添加默认命令..."
            echo "CMD [\"npm\", \"start\"]" >> Dockerfile
          fi
          
          echo "Dockerfile验证完成，最终内容:"
          cat Dockerfile
        shell: bash

      # 使用AI生成的Dockerfile构建镜像
      - name: 构建AI生成的Dockerfile
        if: steps.project-detection.outputs.use_existing_dockerfile == 'false'
        uses: docker/build-push-action@v4
        with:
          context: ./src
          push: true
          tags: ${{ github.event.inputs.registry }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}
          # 禁用缓存配置，避免错误
          no-cache: true
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      # 使用项目自带Dockerfile构建
      - name: 使用项目自带Dockerfile构建
        if: steps.project-detection.outputs.use_existing_dockerfile == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./src
          push: true
          tags: ${{ github.event.inputs.registry }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}
          # 禁用缓存配置，避免错误
          no-cache: true
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      # 构建完成后通知
      - name: 通知构建完成
        if: ${{ success() && github.event.inputs.callback_url != '' }}
        run: |
          # 保存Dockerfile的副本，用于通知
          if [ -f "src/Dockerfile" ]; then
            cp src/Dockerfile ./dockerfile_used.txt
          fi
          
          # 确定是用AI生成还是使用现有的Dockerfile
          if [ "${{ steps.project-detection.outputs.use_existing_dockerfile }}" == "true" ]; then
            DOCKERFILE_SOURCE="使用项目自带的Dockerfile"
          else
            DOCKERFILE_SOURCE="由AI自动生成Dockerfile"
          fi
          
          # 发送包含更多信息的通知
          curl -X POST ${{ github.event.inputs.callback_url }} \
            -H "Content-Type: application/json" \
            -d '{
              "status": "success",
              "image": "${{ github.event.inputs.registry }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}",
              "repo_url": "${{ github.event.inputs.repo_url }}",
              "branch": "${{ github.event.inputs.branch }}",
              "build_id": "${{ github.run_id }}",
              "dockerfile_source": "'"$DOCKERFILE_SOURCE"'",
              "ai_option": "${{ github.event.inputs.ai_options }}"
            }'
        shell: bash

      # 构建失败后通知
      - name: 通知构建失败
        if: ${{ failure() && github.event.inputs.callback_url != '' }}
        run: |
          # 如果生成了Dockerfile但构建失败，提供Dockerfile供分析
          DOCKERFILE_CONTENT=""
          if [ -f "src/Dockerfile" ]; then
            DOCKERFILE_CONTENT=$(cat src/Dockerfile | base64 -w 0)
          fi
          
          curl -X POST ${{ github.event.inputs.callback_url }} \
            -H "Content-Type: application/json" \
            -d '{
              "status": "failed",
              "repo_url": "${{ github.event.inputs.repo_url }}",
              "branch": "${{ github.event.inputs.branch }}",
              "build_id": "${{ github.run_id }}",
              "dockerfile_content_base64": "'"$DOCKERFILE_CONTENT"'"
            }'
        shell: bash 