name: Docker Build Workflow

# 增加权限配置，允许自动运行
permissions:
  contents: write
  packages: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: '代码仓库地址'
        required: true
        type: string
      repo_branch:
        description: '代码仓库分支'
        required: true
        default: 'main'
        type: string
      repo_token:
        description: '私有仓库访问令牌 (可选)'
        required: false
        type: string
      dockerfile_path:
        description: 'Dockerfile路径 (相对于仓库根目录)'
        required: true
        default: 'Dockerfile'
        type: string
      docker_registry:
        description: 'Docker镜像仓库地址'
        required: true
        type: string
        default: 'docker.io'
      docker_username:
        description: 'Docker仓库用户名'
        required: true
        type: string
      docker_password:
        description: 'Docker仓库密码/令牌'
        required: true
        type: string
      image_name:
        description: 'Docker镜像名称'
        required: true
        type: string
      image_tag:
        description: 'Docker镜像标签'
        required: true
        default: 'latest'
        type: string
      platforms:
        description: '构建平台 (例如: linux/amd64,linux/arm64)'
        required: false
        type: string
        default: 'linux/amd64'
      github_token:
        description: 'GitHub Token (用于授权，可选)'
        required: false
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 检出当前仓库代码
        uses: actions/checkout@v4
        with:
          token: ${{ github.event.inputs.github_token || secrets.GITHUB_TOKEN }}
      
      - name: 克隆目标仓库
        run: |
          mkdir -p source_code
          if [ -n "${{ github.event.inputs.repo_token }}" ]; then
            # 私有仓库
            REPO_URL=$(echo "${{ github.event.inputs.repo_url }}" | sed "s/https:\/\//https:\/\/${{ github.event.inputs.repo_token }}@/g")
            git clone --branch ${{ github.event.inputs.repo_branch }} $REPO_URL ./source_code
          else
            # 公开仓库
            git clone --branch ${{ github.event.inputs.repo_branch }} ${{ github.event.inputs.repo_url }} ./source_code
          fi
      
      - name: 检查Dockerfile
        run: |
          DOCKERFILE_PATH="./source_code/${{ github.event.inputs.dockerfile_path }}"
          if [ ! -f "$DOCKERFILE_PATH" ]; then
            echo "错误: Dockerfile不存在于路径: $DOCKERFILE_PATH"
            exit 1
          fi
          echo "Dockerfile内容:"
          cat "$DOCKERFILE_PATH"
      
      - name: 预处理Dockerfile
        run: |
          DOCKERFILE_PATH="./source_code/${{ github.event.inputs.dockerfile_path }}"
          # 检查是否需要创建特定目录
          if grep -q "chmod.*-R.*777.*\/var\/www\/html\/" "$DOCKERFILE_PATH"; then
            echo "检测到需要预创建目录的命令，修改Dockerfile"
            sed -i 's|chown -R www-data:www-data /var/www/html|mkdir -p /var/www/html/install /var/www/html/file \&\& chown -R www-data:www-data /var/www/html|g' "$DOCKERFILE_PATH"
            echo "修改后的Dockerfile:"
            cat "$DOCKERFILE_PATH"
          fi
      
      # 设置QEMU支持多平台构建
      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3
      
      # 设置Docker Buildx
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 登录到Docker镜像仓库
      - name: 登录到Docker仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ github.event.inputs.docker_registry }}
          username: ${{ github.event.inputs.docker_username }}
          password: ${{ github.event.inputs.docker_password }}
      
      # 构建并推送Docker镜像
      - name: 构建并推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: ./source_code
          file: ./source_code/${{ github.event.inputs.dockerfile_path }}
          push: true
          tags: ${{ github.event.inputs.docker_registry }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}
          platforms: ${{ github.event.inputs.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # 显示构建结果
      - name: 构建结果
        run: |
          echo "Docker镜像构建完成!"
          echo "镜像: ${{ github.event.inputs.docker_registry }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}"
          echo "构建平台: ${{ github.event.inputs.platforms }}" 