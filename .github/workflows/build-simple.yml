name: Simple Build and Deploy

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: '代码仓库地址'
        required: true
      branch:
        description: '分支名称'
        default: 'main'
        required: true
      image_name:
        description: '镜像名称'
        required: true
      image_tag:
        description: '镜像标签'
        default: 'latest'
        required: true
      registry:
        description: '镜像仓库地址'
        default: 'docker.io'
        required: true
      docker_auth:
        description: 'Docker认证(格式:username:password)'
        required: true

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检查输入参数
        run: |
          echo "代码仓库: ${{ github.event.inputs.repo_url }}"
          echo "分支: ${{ github.event.inputs.branch }}"

      - name: 克隆源代码
        run: |
          git clone --depth 1 -b ${{ github.event.inputs.branch }} ${{ github.event.inputs.repo_url }} src
        shell: bash

      # 登录Docker仓库
      - name: 登录镜像仓库
        run: |
          # 分割Docker认证字符串
          DOCKER_AUTH="${{ github.event.inputs.docker_auth }}"
          DOCKER_USERNAME=$(echo $DOCKER_AUTH | cut -d':' -f1)
          DOCKER_PASSWORD=$(echo $DOCKER_AUTH | cut -d':' -f2-)
          
          # 使用Docker登录命令
          echo $DOCKER_PASSWORD | docker login ${{ github.event.inputs.registry }} -u $DOCKER_USERNAME --password-stdin
        shell: bash

      # 设置Docker Buildx
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # 生成一个简单的Dockerfile
      - name: 生成基本Dockerfile
        run: |
          cd src
          # 创建基本Dockerfile
          echo "FROM node:14-alpine" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "RUN if [ -f \"package.json\" ]; then npm install; fi" >> Dockerfile
          echo "EXPOSE 3000" >> Dockerfile
          echo "CMD [\"npm\", \"start\"]" >> Dockerfile
          
          echo "生成的Dockerfile内容:"
          cat Dockerfile
        shell: bash

      # 构建镜像
      - name: 构建Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: ./src
          push: true
          tags: ${{ github.event.inputs.registry }}/${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}
          no-cache: true

      # 构建完成通知
      - name: 通知构建完成
        run: echo "构建完成" 